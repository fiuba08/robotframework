*** Settings ***
Suite Setup       Some process    suite_process
Suite Teardown    Stop some process    suite_process
Test Teardown     Restart Suite Process If Needed
Library           Process.py
Library           OperatingSystem
Resource          resource.txt

*** Test Cases ***
Library Namespace should be global
    Process Should Be Alive    suite_process

Running a process
    ${result}=    Run Python Process    print 'hello'
    Result should equal    ${result}    stdout=hello\n    exit_code=0

Error in exit code and stderr output
    ${result}=    Run Python Process    1/0
    Result should equal    ${result}    stderr=*ZeroDivisionError: integer division or modulo by zero*    exit_code=1

Start And Wait Process
    ${handle}=    Start Python Process    import time;time.sleep(0.1)
    ${is_alive}=    Process Is Alive    ${handle}
    Should Be True    ${is_alive}
    Wait For Process    ${handle}
    Process Should Be Dead    ${handle}

Switching active process
    ${process_one}=    Some process    one
    Stop Some Process    one
    ${process_two}=    Some process    two
    Process Should Be Alive    ${process_two}
    Switch Active Process    one
    Process Should Be Dead
    Switch Active Process    two
    Process Should Be Alive
    Stop Some Process

Run process does not change active process
    Some process    active
    ${expected id}=    Get Process Id
    Run Python Process    1+1
    ${id}=    Get Process Id
    Should Be Equal    ${expected id}    ${id}

Killing process
    ${handle}=    Some process
    ${is_alive}=    Process Is Alive    ${handle}
    Should Be True    ${is_alive}
    Terminate Process    ${handle}    kill=${True}
    Wait For Process    ${handle}
    Process Should Be Dead    ${handle}

Terminating process
    ${handle}=    Some process
    Terminate Process    ${handle}
    Wait For Process    ${handle}
    Process Should Be Dead    ${handle}

Pid
    ${handle}=    Some process
    ${pid}=    Get Process Id    ${handle}
    Should Not Be Equal   ${pid}   ${None}
    Evaluate    os.kill(int(${pid}),signal.SIGTERM)    os,signal
    Wait For Process    ${handle}
    Process Should Be Dead    ${handle}

Starting many processes and killing all
    ${handle1}=    Some process
    ${handle2}=    Some process
    ${handle3}=    Some process
    ${handle4}=    Some process
    ${handle5}=    Some process
    Sleep    0.1
    Process Should be alive    ${handle1}
    Process Should be alive    ${handle2}
    Process Should be alive    ${handle3}
    Process Should be alive    ${handle4}
    Process Should be alive    ${handle5}
    Kill all processes
    Sleep    0.1
    Process Should Be Dead    ${handle1}
    Process Should Be Dead    ${handle2}
    Process Should Be Dead    ${handle3}
    Process Should Be Dead    ${handle4}
    Process Should Be Dead    ${handle5}

Kill Process Which Does Not Exist
    ${handle}=    Some process
    Terminate Process    ${handle}    kill=${True}
    Terminate Process    ${handle}    kill=${True}

Wait For Process Which Does Not Exist
    ${handle}=    Some process
    Terminate Process    ${handle}    kill=${True}
    Wait For Process    ${handle}

Change Current Working Directory
    ${result}=    Run Process    python    -c    import os; print os.path.abspath(os.curdir);    cwd=.
    ${result2}=    Run Process    python    -c    import os; print os.path.abspath(os.curdir);    cwd=..
    Should Not Be Equal    ${result.stdout}    ${result2.stdout}

Setting Stdout
    ${result}=    Run Process    python -c "print 'hello'"    shell=True    stdout=${TEMPDIR}${/}myfile_1.txt
    ${output}=    Get File    ${TEMPDIR}${/}myfile_1.txt
    Should Not Be Empty    ${output}
    Should Be Equal    ${result.stdout}    ${output}
    #[Teardown]    Remove File    ${TEMPDIR}${/}myfile_1.txt

Setting Stderr
    ${result}=    Run Process    python -c "1/0"    shell=True    stderr=${TEMPDIR}${/}myfile.txt
    ${output}=    Get File    ${TEMPDIR}${/}myfile.txt
    Should Not Be Empty    ${output}
    Should Be Equal    ${result.stderr}    ${output}
    [Teardown]    Remove File    ${TEMPDIR}${/}myfile.txt

Escaping equals sign
    ${result}=    Run Process    python    -c    print 'stderr\=bar.buu'    shell=True
    Result should equal    ${result}    stdout=*stderr=bar.buu*

Running a process in a shell
    ${result}=    Run Process    python -c "print 'hello'"    shell=True
    Result should equal    ${result}    stdout=*hello*    exit_code=0
    Run Keyword And Expect Error    *    Run Process    python -c "print 'hello'"    shell=${False}

Input things to process
    Start New Process    python -c "print 'inp %s' % raw_input()"    shell=True
    Input To Process    some input
    ${result}=    Wait For Process
    Should Match    ${result.stdout}    *inp some input*

Process alias
    ${handle}=    Start New Process    python -c "print 'hello'"    shell=True    alias=hello
    ${pid_by_handle}=    Get process id    ${handle}
    ${pid_by_alias}=    Get process id    hello
    Should Be Equal    ${pid_by_handle}    ${pid_by_alias}

Lot of output
    [Tags]    performance
    ${handle}=    Run Process    python -vc "for i in range(350000): \tprint 'a'*400"    shell=True    stdout=${TEMPDIR}${/}myout.txt
    Log    ${handle.exit_code}
    Log    ${handle.stderr}
    File Should Not Be Empty    ${TEMPDIR}${/}myout.txt
    [Teardown]    Remove File    ${TEMPDIR}${/}myout.txt

Redirecting Stderr to Stdout
    ${result}=    Run Process    python    -c    print 'hello';1/0    stderr=STDOUT
    Should Match    ${result.stdout}    *hello*
    Should Match    ${result.stdout}    *ZeroDivisionError*
    Log    ${result.stderr}

Redirecting Stderr to Stdout with filename
    ${result}=    Run Process    python    -c    print 'hello';1/0    stdout=filename.txt    stderr=filename.txt
    Should Match    ${result.stdout}    *hello*
    Should Match    ${result.stdout}    *ZeroDivisionError*
    Log    ${result.stderr}
    [Teardown]    Remove File    filename.txt

Current working directory should be used with stdout and stderr
    Create Directory    ${TEMPDIR}${/}hc
    ${result}=    Run Process    python    -c    print 'moon kuu';1/0    cwd=${TEMPDIR}${/}hc    stdout=myout.txt
    ...    stderr=myerr.txt
    ${output}=    Get File    ${TEMPDIR}${/}hc${/}myout.txt
    ${output2}=    Get File    ${TEMPDIR}${/}hc${/}myerr.txt
    Should Match    ${output}    *moon kuu*
    Should Match    ${output2}    *ZeroDivisionError*
    [Teardown]    Remove Directory    ${TEMPDIR}${/}hc    True

Current working directory should not be used with stdout and stderr when absolute path in use
    Create Directory    ${TEMPDIR}${/}hc
    ${stdout_path}=    Evaluate    os.path.abspath('myout.txt')    os
    ${result}=    Run Process    python    -c    print 'moon kuu';1/0    cwd=${TEMPDIR}${/}hc    stdout=${stdout_path}
    ...    stderr=myerr.txt
    ${output}=    Get File    ${stdout_path}
    ${output2}=    Get File    ${TEMPDIR}${/}hc${/}myerr.txt
    Should Match    ${output}    *moon kuu*
    Should Match    ${output2}    *ZeroDivisionError*
    [Teardown]    Remove Directory    ${TEMPDIR}${/}hc    True

*** Keywords ***
Restart Suite Process If Needed
    ${alive}=    Process Is Alive    suite_process
    Run Keyword If    not ${alive}    Some process    suite_process
