*** Settings ***
Suite Setup       Suite Setup
Suite Teardown    Suite Teardown
Test Teardown     Restart Suite Process If Needed
Library           Process.py
Library           OperatingSystem
Library           Collections
Resource          resource.txt

*** Test Cases ***
Library Namespace should be global
    Process Should Be Running    suite_process

Running a process
    ${result}=    Run Python Process    print 'hello'
    Result should equal    ${result}    stdout=hello\n    exit_code=0

Error in exit code and stderr output
    ${result}=    Run Python Process    1/0
    Result should equal    ${result}    stderr=*ZeroDivisionError: integer division or modulo by zero*    exit_code=1

Start And Wait Process
    ${handle}=    Start Python Process    import time;time.sleep(0.1)
    ${is_alive}=    Process Is Running    ${handle}
    Should Be True    ${is_alive}
    Wait For Process    ${handle}
    Process Should Be Stopped    ${handle}

Switching active process
    ${process_one}=    Some process    one
    Stop Some Process    one
    ${process_two}=    Some process    two
    Process Should Be Running    ${process_two}
    Switch Process    one
    Process Should Be Stopped
    Switch Process    two
    Process Should Be Running
    Stop Some Process

Change Current Working Directory
    ${result}=    Run Process    python    -c    import os; print os.path.abspath(os.curdir);    cwd=.
    ${result2}=    Run Process    python    -c    import os; print os.path.abspath(os.curdir);    cwd=..
    Should Not Be Equal    ${result.stdout}    ${result2.stdout}

Setting Stdout
    ${result}=    Run Process    python -c "print 'hello'"    shell=True    stdout=${TEMPDIR}${/}myfile_1.txt
    ${output}=    Get File    ${TEMPDIR}${/}myfile_1.txt
    Should Not Be Empty    ${output}
    Should Be Equal    ${result.stdout}    ${output}
    [Teardown]    Run Keyword And Ignore Error   Remove File    ${TEMPDIR}${/}myfile_1.txt

Setting Stderr
    ${result}=    Run Process    python -c "1/0"    shell=True    stderr=${TEMPDIR}${/}myfile.txt
    ${output}=    Get File    ${TEMPDIR}${/}myfile.txt
    Should Not Be Empty    ${output}
    Should Be Equal    ${result.stderr}    ${output}
    [Teardown]    Run Keyword And Ignore Error   Remove File    ${TEMPDIR}${/}myfile.txt

Without Env Configuration the Environment Should Be As It Was
    Set Environment Variable  normalvar  normal
    ${result}=    Run Process    python -c "import os; print os.getenv('normalvar', '-'), os.getenv('specialvar', '-');"    shell=True
    Should Be Equal        ${result.stdout}    normal -\n

With Env: Configuration the Environment Should Contain Additional Variable
    Set Environment Variable  normalvar  normal
    ${result}=    Run Process    python -c "import os; print os.getenv('normalvar', '-'), os.getenv('specialvar', '-');"    shell=True   env:specialvar=spessu
    Should Be Equal        ${result.stdout}    normal spessu\n

With Env= Configuration the Environment Should Contain Only Additional Variable
    Set Environment Variable  normalvar  normal
    ${setenv}=    Create Dictionary           specialvar  spessu
    ${result}=    Run Process    python -c "import os; print os.getenv('normalvar', '-'), os.getenv('specialvar', '-');"    shell=True   env=${setenv}
    Should Be Equal        ${result.stdout}    - spessu\n

Setting Environment With Multiple Values
    Set Environment Variable  normalvar  normal
    ${result}=    Run Process    python -c "import os; print os.getenv('normalvar', '-'), os.getenv('specialvar', '-'), os.getenv('diiba', '-');"    shell=True   env:specialvar=spessu   env:diiba=daaba
    Should Be Equal        ${result.stdout}  normal spessu daaba\n

Setting Environment With Multiple Values Using Dictionary
    Set Environment Variable  normalvar  normal
    ${setenv}=    Create Dictionary           specialvar  spessu  diiba2  daaba2
    ${result}=    Run Process    python   -c    import os; print os.getenv('normalvar', '-'), os.getenv('specialvar', '-'), os.getenv('diiba2', '-');    env=${setenv}
    Should Be Equal        ${result.stdout}  - spessu daaba2\n

Unsupported Arguments Should Cause Error
    ${setenv}=    Create Dictionary           sp  spessu
    Run Keyword And Expect Error  'genv' is not supported by this keyword.    Run Process    python -c "import os; print os.environ;"    shell=True   genv=${setenv}
    Run Keyword And Expect Error  'shellx' is not supported by this keyword.    Run Process    python -c "import os; print os.environ;"    shellx=True

Escaping equals sign
    ${result}=    Run Process    python    -c    print 'stderr\=bar.buu'    shell=True
    Result should equal    ${result}    stdout=*stderr=bar.buu*

Running a process in a shell
    ${result}=    Run Process    python -c "print 'hello'"    shell=True
    Result should equal    ${result}    stdout=*hello*    exit_code=0
    Run Keyword And Expect Error    *    Run Process    python -c "print 'hello'"    shell=${False}

Input things to process
    Start Process    python -c "print 'inp %s' % raw_input()"    shell=True
    ${process}=    Get Process Object
    Log   ${process.communicate("some input\n")}
    ${result}=    Wait For Process
    Should Match    ${result.stdout}    *inp some input*

Process alias
    ${handle}=    Start Process    python -c "print 'hello'"    shell=True    alias=hello
    ${pid_by_handle}=    Get process id    ${handle}
    ${pid_by_alias}=    Get process id    hello
    Should Be Equal    ${pid_by_handle}    ${pid_by_alias}

Redirecting Stderr to Stdout
    ${result}=    Run Process    python    -c    print 'hello';1/0    stderr=STDOUT
    Should Match    ${result.stdout}    *hello*
    Should Match    ${result.stdout}    *ZeroDivisionError*
    Log    ${result.stderr}

Redirecting Stderr to Stdout with filename
    ${result}=    Run Process    python    -c    print 'hello';1/0    stdout=filename.txt    stderr=filename.txt
    Should Match    ${result.stdout}    *hello*
    Should Match    ${result.stdout}    *ZeroDivisionError*
    Log    ${result.stderr}
    [Teardown]    Run Keyword And Ignore Error   Remove File    filename.txt

Current working directory should be used with stdout and stderr
    Create Directory    ${TEMPDIR}${/}hc
    ${result}=    Run Process    python    -c    print 'moon kuu';1/0    cwd=${TEMPDIR}${/}hc    stdout=myout.txt
    ...    stderr=myerr.txt
    ${output}=    Get File    ${TEMPDIR}${/}hc${/}myout.txt
    ${output2}=    Get File    ${TEMPDIR}${/}hc${/}myerr.txt
    Should Match    ${output}    *moon kuu*
    Should Match    ${output2}    *ZeroDivisionError*
    [Teardown]    Run Keyword And Ignore Error   Remove Directory    ${TEMPDIR}${/}hc    True

Current working directory should not be used with stdout and stderr when absolute path in use
    Create Directory    ${TEMPDIR}${/}hc
    ${stdout_path}=    Evaluate    os.path.abspath('myout.txt')    os
    ${result}=    Run Process    python    -c    print 'moon kuu';1/0    cwd=${TEMPDIR}${/}hc    stdout=${stdout_path}
    ...    stderr=myerr.txt
    ${output}=    Get File    ${stdout_path}
    ${output2}=    Get File    ${TEMPDIR}${/}hc${/}myerr.txt
    Should Match    ${output}    *moon kuu*
    Should Match    ${output2}    *ZeroDivisionError*
    Remove File    ${stdout_path}
    [Teardown]    Run Keyword And Ignore Error   Remove Directory    ${TEMPDIR}${/}hc    True


*** Keywords ***
Restart Suite Process If Needed
    ${alive}=    Process Is Running    suite_process
    Run Keyword Unless    ${alive}    Some process    suite_process

Suite Setup
    Check Preconditions
    Some process    suite_process

Suite Teardown
    ${is_ok}=   Valid Platform
    Run Keyword If  ${is_ok}   Stop some process    suite_process

Check Preconditions
    ${is_ok}=   Valid Platform
    Run Keyword Unless   ${is_ok}    Set Suite Metadata  info   precondition_fail
    Run Keyword Unless   ${is_ok}    Fail

Valid Platform
    ${is_ok}=   Evaluate   sys.platform != 'cli' and not (os.sep == '\\\\' and sys.platform.startswith('java'))   sys, os
    [Return]    ${is_ok}
