*** Settings ***
Documentation    Tests ET's XPATH support documented at
...              http://effbot.org/zone/element-xpath.htm
...              Notice that '..', predicates ('[stuff]'), and more complex
...              expressions with non-ASCII characters require ET 1.3
...              (i.e. interpreter version 2.7) or newer.
Resource         resource.txt
Test Template    Get element by xpath


*** Test Cases ***
Tag
    another    another

Path
    another/child    child    text

'*'
    */grandchild    grandchild    grand child text

'.'
    .    test
    ./another    another

'//'
    .//grandchild    grandchild

'//' returning multiple elements
    [Template]    NONE
    @{elements}=    Get Elements    ${TEST}    .//child
    Length Should Be    ${elements}    4
    :FOR    ${elem}    IN    @{elements}
    \    Should Be Equal    ${elem.tag}    child
    Should Be Equal    ${elem.text}    text

'[@attrib]'
    [Documentation]    FAIL No element matching 'child[@nonex]' found.
    child[@a2]    child    ${NONE}
    child[@nonex]    not-found

'[@attrib="value"]'
    [Documentation]    FAIL No element matching 'child[@id="xxx"]' found.
    child[@id="2"]    child    \n${SPACE*8}child 2 text\n${SPACE*8}
    child[@a2='xxx']    child    ${NONE}
    child[@id="xxx"]    not-found

'[tag]'
    [Documentation]    FAIL No element matching 'child[nonex]' found.
    *[grandchild]    child
    child[nonex]    not-found

'[position]'
    [Documentation]    FAIL No element matching 'child[4]' found.
    child[1]    child    child 1 text
    child[3]    child    ${NONE}
    child[4]    not-found

Stacked predicates
    child[@id][@a3='y']    child    ${NONE}

Non-ASCII tag names
    täg    täg    xml=<rööt><täg/></rööt>
    täg/chïld    chïld    xml=<rööt><täg><chïld/></täg></rööt>

More complex non-ASCII xpath
    [Documentation]    FAIL Multiple elements (2) matching './/chïld' found.
    .//chïld    chïld    xml=<rööt><chïld/><täg><chïld/></täg></rööt>


*** Keywords ***
Get element by xpath
    [Arguments]    ${xpath}    ${tag}    ${text}=IGNORE    ${xml}=${TEST}
    ${element}=     Get Element    ${xml}    ${xpath}
    Should Be Equal    ${element.tag}    ${tag}
    Run Keyword If    '''${text}''' != 'IGNORE'    Should Be Equal    ${element.text}    ${text}
